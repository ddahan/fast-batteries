/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/access-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Access Token
         * @description OAuth2 compatible token login, get an access token for future requests
         */
        post: operations["access_token_auth_access_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/linkedin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Linkedin Auth
         * @description Build and return the full Linked In authorization URL to redirect to
         */
        get: operations["linkedin_auth_auth_linkedin_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/linkedin/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Linkedin Auth Callback
         * @description Hook called by Linked In during OAuth2 process
         */
        get: operations["linkedin_auth_callback_auth_linkedin_callback_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Me */
        get: operations["me_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset Password */
        post: operations["reset_password_auth_reset_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/send-reset-password-link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Reset Password Link */
        post: operations["send_reset_password_link_auth_send_reset_password_link_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/badges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read all badges */
        get: operations["read_badges_badges_get"];
        put?: never;
        /** Create a new badge */
        post: operations["create_badge_badges_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/badges/{badge_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read a given badge */
        get: operations["read_badge_badges__badge_id__get"];
        /** Update a badge entirely */
        put: operations["update_badge_entirely_badges__badge_id__put"];
        post?: never;
        /** Delete the given badge */
        delete: operations["destroy_badge_badges__badge_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update a badge partially
         * @description note: not used in the app for now. Here as an example.
         *     Could be absolutely used instead of 'update_badge_entirely' method in our case.
         */
        patch: operations["update_badge_partially_badges__badge_id__patch"];
        trace?: never;
    };
    "/badges/{badge_id}/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Invert activation state */
        patch: operations["invert_activation_state_badges__badge_id__activity_patch"];
        trace?: never;
    };
    "/debug/bg-task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Some Method Including A Background Task
         * @description Demo of built-in BackGroundTasks from FastAPI (Starlette actually)
         */
        get: operations["some_method_including_a_background_task_debug_bg_task_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/celery-task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Some Method With Celery Task Inside
         * @description Demo of Celery task execution
         */
        get: operations["some_method_with_celery_task_inside_debug_celery_task_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/db-parameters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read database parameters */
        get: operations["read_db_parameters_debug_db_parameters_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/div-by-zero": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Div By Zero
         * @description This is a fake endpoint to test uncaugth exception
         */
        get: operations["div_by_zero_debug_div_by_zero_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/schema-includer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Schema Includer
         * @description This is a fake endpoint to force some useful schemas to be included in openAPI
         */
        get: operations["schema_includer_debug_schema_includer_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read all settings */
        get: operations["read_settings_debug_settings_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload Files */
        post: operations["upload_files_debug_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Make a health check */
        get: operations["health_check_health_check_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read all users with pagination */
        get: operations["read_users_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user (the classic way) */
        post: operations["register_user_users_signup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AccessJWT */
        AccessJWT: {
            /** Access Token */
            access_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
        };
        /** BadgeCreate */
        BadgeCreate: {
            /** Expireat */
            expireAt?: string | null;
            /**
             * Isactive
             * @default true
             */
            isActive: boolean | null;
            /** Ownerid */
            ownerId: string;
        };
        /** BadgeFullUpdate */
        BadgeFullUpdate: {
            /**
             * Expireat
             * Format: date-time
             */
            expireAt: string;
            /** Isactive */
            isActive: boolean;
            /** Ownerid */
            ownerId: string;
        };
        /** BadgeOut */
        BadgeOut: {
            /**
             * Createdat
             * Format: date-time
             */
            createdAt: string;
            /** Expireat */
            expireAt: string | null;
            /** Expired */
            expired: boolean;
            /** Id */
            id: string;
            /** Isactive */
            isActive: boolean;
            /**
             * Modifiedat
             * Format: date-time
             */
            modifiedAt: string;
            owner: components["schemas"]["BadgeOwner"];
        };
        /** BadgeOwner */
        BadgeOwner: {
            /** Firstname */
            firstName: string;
            /** Id */
            id: string;
            /** Label */
            readonly label: string;
            /** Lastname */
            lastName: string;
        };
        /** BadgePartialUpdate */
        BadgePartialUpdate: {
            /** Expireat */
            expireAt?: string | null;
            /**
             * Isactive
             * @default true
             */
            isActive: boolean | null;
            /** Ownerid */
            ownerId?: string | null;
        };
        /** Body_access_token_auth_access_token_post */
        Body_access_token_auth_access_token_post: {
            /** Client Id */
            client_id?: string | null;
            /** Client Secret */
            client_secret?: string | null;
            /** Grant Type */
            grant_type?: string | null;
            /** Password */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Username */
            username: string;
        };
        /** Body_upload_files_debug_upload_post */
        Body_upload_files_debug_upload_post: {
            /** Files */
            files: string[];
        };
        /** ErrorPayload */
        ErrorPayload: {
            /** Field */
            field?: {
                [key: string]: string;
            };
            /** General */
            general?: string[];
            /** Nonfield */
            nonfield?: string[];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * Message
         * @description Generic message for API responses
         */
        Message: {
            /** Message */
            message: string;
        };
        /**
         * MySchema
         * @description Allow to add a custom global config for all schemas.
         */
        MySchema: Record<string, never>;
        /**
         * Page
         * @description Model to represent a page of results along with pagination metadata.
         */
        Page: {
            /**
             * Currentpage
             * @description Page number (could differ from request)
             */
            currentPage: number;
            /**
             * Currentpagesize
             * @description Number of items per page (could differ from request)
             */
            currentPageSize: number;
            /**
             * Endindex
             * @description Ending item index
             */
            endIndex: number;
            /**
             * Items
             * @description List of items on this Page
             */
            items: components["schemas"]["MySchema"][];
            /**
             * Requestedpage
             * @description Requested page number
             */
            requestedPage: number;
            /**
             * Requestedpagesize
             * @description Requested number of items per page
             */
            requestedPageSize: number;
            /**
             * Startindex
             * @description Starting item index
             */
            startIndex: number;
            /**
             * Totalitems
             * @description Number of total items
             */
            totalItems: number;
            /**
             * Totalpages
             * @description Total number of pages
             */
            totalPages: number;
        };
        /** Page[BadgeOut] */
        Page_BadgeOut_: {
            /**
             * Currentpage
             * @description Page number (could differ from request)
             */
            currentPage: number;
            /**
             * Currentpagesize
             * @description Number of items per page (could differ from request)
             */
            currentPageSize: number;
            /**
             * Endindex
             * @description Ending item index
             */
            endIndex: number;
            /**
             * Items
             * @description List of items on this Page
             */
            items: components["schemas"]["BadgeOut"][];
            /**
             * Requestedpage
             * @description Requested page number
             */
            requestedPage: number;
            /**
             * Requestedpagesize
             * @description Requested number of items per page
             */
            requestedPageSize: number;
            /**
             * Startindex
             * @description Starting item index
             */
            startIndex: number;
            /**
             * Totalitems
             * @description Number of total items
             */
            totalItems: number;
            /**
             * Totalpages
             * @description Total number of pages
             */
            totalPages: number;
        };
        /** Page[BadgeOwner] */
        Page_BadgeOwner_: {
            /**
             * Currentpage
             * @description Page number (could differ from request)
             */
            currentPage: number;
            /**
             * Currentpagesize
             * @description Number of items per page (could differ from request)
             */
            currentPageSize: number;
            /**
             * Endindex
             * @description Ending item index
             */
            endIndex: number;
            /**
             * Items
             * @description List of items on this Page
             */
            items: components["schemas"]["BadgeOwner"][];
            /**
             * Requestedpage
             * @description Requested page number
             */
            requestedPage: number;
            /**
             * Requestedpagesize
             * @description Requested number of items per page
             */
            requestedPageSize: number;
            /**
             * Startindex
             * @description Starting item index
             */
            startIndex: number;
            /**
             * Totalitems
             * @description Number of total items
             */
            totalItems: number;
            /**
             * Totalpages
             * @description Total number of pages
             */
            totalPages: number;
        };
        /** Pagination */
        Pagination: {
            /**
             * Currentpage
             * @description Page number (could differ from request)
             */
            currentPage: number;
            /**
             * Currentpagesize
             * @description Number of items per page (could differ from request)
             */
            currentPageSize: number;
            /**
             * Endindex
             * @description Ending item index
             */
            endIndex: number;
            /**
             * Requestedpage
             * @description Requested page number
             */
            requestedPage: number;
            /**
             * Requestedpagesize
             * @description Requested number of items per page
             */
            requestedPageSize: number;
            /**
             * Startindex
             * @description Starting item index
             */
            startIndex: number;
            /**
             * Totalitems
             * @description Number of total items
             */
            totalItems: number;
            /**
             * Totalpages
             * @description Total number of pages
             */
            totalPages: number;
        };
        /** Settings */
        Settings: {
            /**
             * Access Token Expire
             * Format: duration
             * @default P7D
             */
            ACCESS_TOKEN_EXPIRE: string;
            /**
             * Alembic Config Path
             * Format: path
             */
            readonly ALEMBIC_CONFIG_PATH: string;
            /**
             * Alembic Migration Path
             * Format: path
             */
            readonly ALEMBIC_MIGRATION_PATH: string;
            /**
             * Alembic Migration Version Path
             * Format: path
             */
            readonly ALEMBIC_MIGRATION_VERSION_PATH: string;
            /**
             * Algorithm
             * @default HS256
             */
            ALGORITHM: string;
            /**
             * App Title
             * @default 🔋 Fast Batteries
             */
            APP_TITLE: string;
            /**
             * App Version
             * @default 0.1.0
             */
            APP_VERSION: string;
            /** Back Domain */
            BACK_DOMAIN: string;
            /** Back Url */
            readonly BACK_URL: string;
            /**
             * Base Dir
             * Format: path
             * @default /workspaces/fast-batteries/back
             */
            BASE_DIR: string;
            /**
             * Celery Beat Scheduler
             * @default app.core.scheduling:MyDatabaseScheduler
             */
            celery_beat_scheduler: string;
            /**
             * Celery Broker Connection Retry On Startup
             * @default false
             */
            celery_broker_connection_retry_on_startup: boolean;
            /** Celery Broker Url */
            readonly celery_broker_url: string;
            /** Celery Result Backend */
            readonly celery_result_backend: string;
            /**
             * Celery Result Extended
             * @default true
             */
            celery_result_extended: boolean;
            /**
             * Celery Timezone
             * Format: zoneinfo
             * @default Europe/Paris
             */
            celery_timezone: string;
            /**
             * Cors Allow Credentials
             * @default true
             */
            CORS_ALLOW_CREDENTIALS: boolean;
            /**
             * Cors Allow Headers
             * @default [
             *       "*"
             *     ]
             */
            CORS_ALLOW_HEADERS: string[];
            /**
             * Cors Allow Methods
             * @default [
             *       "*"
             *     ]
             */
            CORS_ALLOW_METHODS: string[];
            /** Cors Allow Origin */
            CORS_ALLOW_ORIGIN: string[];
            /** Database Allow Reset */
            DATABASE_ALLOW_RESET: boolean;
            /** Database Echo */
            DATABASE_ECHO: boolean;
            /** Debug */
            DEBUG: boolean;
            /**
             * Default Items Per Page
             * @default 10
             */
            DEFAULT_ITEMS_PER_PAGE: number;
            /**
             * Docs Url
             * @default /
             */
            DOCS_URL: string;
            /**
             * Email Backend
             * @enum {string}
             */
            EMAIL_BACKEND: "smtp" | "console" | "dummy";
            /** Email From Email */
            readonly EMAIL_FROM_EMAIL: string;
            /**
             * Email From Name
             * @default Fast Batteries Team
             */
            EMAIL_FROM_NAME: string;
            /**
             * Email Reset Token Expire
             * Format: duration
             * @default PT30M
             */
            EMAIL_RESET_TOKEN_EXPIRE: string;
            /**
             * Email Templates Build Path
             * Format: path
             */
            readonly EMAIL_TEMPLATES_BUILD_PATH: string;
            /** Environment */
            ENVIRONMENT: string;
            /** Front Domain */
            FRONT_DOMAIN: string;
            /** Front Url */
            readonly FRONT_URL: string;
            /**
             * Linkedin Authorization Url
             * @default https://www.linkedin.com/oauth/v2/authorization
             */
            LINKEDIN_AUTHORIZATION_URL: string;
            /** Linkedin Client Id */
            LINKEDIN_CLIENT_ID: string;
            /** Linkedin Client Secret */
            LINKEDIN_CLIENT_SECRET: string;
            /**
             * Linkedin Profile Url
             * @default https://api.linkedin.com/v2/userinfo
             */
            LINKEDIN_PROFILE_URL: string;
            /** Linkedin Redirect Uri */
            readonly LINKEDIN_REDIRECT_URI: string;
            /**
             * Linkedin Scopes
             * @default openid email profile
             */
            LINKEDIN_SCOPES: string;
            /**
             * Linkedin Token Url
             * @default https://www.linkedin.com/oauth/v2/accessToken
             */
            LINKEDIN_TOKEN_URL: string;
            /** Logfire Token */
            LOGFIRE_TOKEN?: string | null;
            /** Main Logo Url */
            readonly MAIN_LOGO_URL: string;
            /**
             * Max Items Per Page
             * @default 50
             */
            MAX_ITEMS_PER_PAGE: number;
            /** Minio Access Key */
            MINIO_ACCESS_KEY: string;
            /** Minio Bucket Name */
            MINIO_BUCKET_NAME: string;
            /** Minio Endpoint */
            readonly MINIO_ENDPOINT: string;
            /** Minio Port */
            MINIO_PORT: number;
            /** Minio Secret Key */
            MINIO_SECRET_KEY: string;
            /** Minio Server */
            MINIO_SERVER: string;
            /**
             * Phone Region Code
             * @default FR
             */
            PHONE_REGION_CODE: string;
            /** Postgres Admin Password */
            POSTGRES_ADMIN_PASSWORD: string;
            /** Postgres Admin Uri */
            readonly POSTGRES_ADMIN_URI: string;
            /** Postgres Admin User */
            POSTGRES_ADMIN_USER: string;
            /** Postgres Db */
            POSTGRES_DB: string;
            /** Postgres Password */
            POSTGRES_PASSWORD: string;
            /**
             * Postgres Port
             * @default 5432
             */
            POSTGRES_PORT: number;
            /** Postgres Server */
            POSTGRES_SERVER: string;
            /** Postgres Uri */
            readonly POSTGRES_URI: string;
            /** Postgres User */
            POSTGRES_USER: string;
            /** Protocol */
            PROTOCOL: string;
            /**
             * Redirect Slashes
             * @default false
             */
            REDIRECT_SLASHES: boolean;
            /**
             * Redis Channel Prefix
             * @default room:
             */
            REDIS_CHANNEL_PREFIX: string;
            /**
             * Redis Db
             * @default 0
             */
            REDIS_DB: number;
            /**
             * Redis Hearbeat Ping
             * @default ping
             */
            REDIS_HEARBEAT_PING: string;
            /**
             * Redis Hearbeat Pong
             * @default pong
             */
            REDIS_HEARBEAT_PONG: string;
            /**
             * Redis Port
             * @default 6379
             */
            REDIS_PORT: number;
            /**
             * Redis Retry Delay
             * Format: duration
             * @default PT3S
             */
            REDIS_RETRY_DELAY: string;
            /** Redis Server */
            REDIS_SERVER: string;
            /** Redis Uri */
            readonly REDIS_URI: string;
            /** Secret Key */
            SECRET_KEY: string;
            /** Smtp Host */
            SMTP_HOST?: string | null;
            /** Smtp Password */
            SMTP_PASSWORD?: string | null;
            /**
             * Smtp Port
             * @default 587
             */
            SMTP_PORT: number;
            /**
             * Smtp Use Tls
             * @default true
             */
            SMTP_USE_TLS: boolean;
            /** Smtp User */
            SMTP_USER?: string | null;
            /** Social Auth Front Redirect Url */
            readonly SOCIAL_AUTH_FRONT_REDIRECT_URL: string;
            /**
             * Timezone
             * Format: zoneinfo
             * @default Europe/Paris
             */
            TIMEZONE: string;
            /** Use Logfire */
            USE_LOGFIRE: boolean;
        };
        /** UserClassicIn */
        UserClassicIn: {
            /**
             * Balance
             * @default 0
             */
            balance: number | string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Firstname */
            firstName: string;
            /** Lastname */
            lastName: string;
            /**
             * Password
             * Format: password
             */
            password: string;
            /** Phonenumber */
            phoneNumber?: string | null;
        };
        /** UserPublic */
        UserPublic: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Firstname */
            firstName: string;
            /** Id */
            id: string;
            /** Issuperuser */
            isSuperuser: boolean;
            /** Lastname */
            lastName: string;
            /** Phonenumber */
            phoneNumber: string | null;
        };
        /** UserResetPassword */
        UserResetPassword: {
            /**
             * Password
             * Format: password
             */
            password: string;
            /** Tokenkey */
            tokenKey: string;
        };
        /** UserSendResetPassword */
        UserSendResetPassword: {
            /**
             * Email
             * Format: email
             */
            email: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    access_token_auth_access_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_access_token_auth_access_token_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessJWT"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    linkedin_auth_auth_linkedin_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    linkedin_auth_callback_auth_linkedin_callback_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    me_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
        };
    };
    reset_password_auth_reset_password_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserResetPassword"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_reset_password_link_auth_send_reset_password_link_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSendResetPassword"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_badges_badges_get: {
        parameters: {
            query?: {
                ordering?: string | null;
                page?: number;
                pageSize?: number;
                search?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_BadgeOut_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_badge_badges_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BadgeCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadgeOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_badge_badges__badge_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                badge_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadgeOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_badge_entirely_badges__badge_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                badge_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BadgeFullUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadgeOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    destroy_badge_badges__badge_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                badge_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_badge_partially_badges__badge_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                badge_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BadgePartialUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadgeOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    invert_activation_state_badges__badge_id__activity_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                badge_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The updated badge */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadgeOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    some_method_including_a_background_task_debug_bg_task_get: {
        parameters: {
            query: {
                seconds: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    some_method_with_celery_task_inside_debug_celery_task_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    read_db_parameters_debug_db_parameters_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    div_by_zero_debug_div_by_zero_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    schema_includer_debug_schema_includer_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pagination"] | components["schemas"]["Page"] | components["schemas"]["ErrorPayload"];
                };
            };
        };
    };
    read_settings_debug_settings_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Settings"];
                };
            };
        };
    };
    upload_files_debug_upload_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_files_debug_upload_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_check_health_check_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    read_users_users_get: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
                search?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_BadgeOwner_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    register_user_users_signup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserClassicIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
